// Doc https://ziglang.org/documentation/master/#Vectors
// Ref https://github.com/michal-z/zig-gamedev/blob/main/libs/zmath/zmath.zig

const std = @import("std");
const Vector = std.meta.Vector;

// Dùng comptime để unroll loop vì độ dài của vector đã biết trước khi code
pub inline fn dotProduct(comptime len: usize, v: []const f32, o: []const f32) f32 {
    var dot_prod: f32 = 0;
    comptime var i: usize = 0;
    inline while (i < len) : (i += 4) {
        const a: Vector(4, f32) = .{
            v[i],
            if (i + 1 < len) v[i + 1] else 0,
            if (i + 2 < len) v[i + 2] else 0,
            if (i + 3 < len) v[i + 3] else 0,
        };
        const b: Vector(4, f32) = .{
            o[i],
            if (i + 1 < len) o[i + 1] else 0,
            if (i + 2 < len) o[i + 2] else 0,
            if (i + 3 < len) o[i + 3] else 0,
        };
        dot_prod += @reduce(.Add, a * b);
    }
    return dot_prod;
}

pub inline fn vecMulAdd(comptime len: usize, v: []const f32, x: f32, o: []f32) []const f32 {
    const x8 = @splat(8, x);

    comptime var i: usize = 0;
    inline while (i < len) : (i += 8) {
        const a: Vector(8, f32) = .{
            v[i],
            if (i + 1 < len) v[i + 1] else 0,
            if (i + 2 < len) v[i + 2] else 0,
            if (i + 3 < len) v[i + 3] else 0,
            if (i + 4 < len) v[i + 4] else 0,
            if (i + 5 < len) v[i + 5] else 0,
            if (i + 6 < len) v[i + 6] else 0,
            if (i + 7 < len) v[i + 7] else 0,
        };
        const b: Vector(8, f32) = .{
            o[i],
            if (i + 1 < len) o[i + 1] else 0,
            if (i + 2 < len) o[i + 2] else 0,
            if (i + 3 < len) o[i + 3] else 0,
            if (i + 4 < len) o[i + 4] else 0,
            if (i + 5 < len) o[i + 5] else 0,
            if (i + 6 < len) o[i + 6] else 0,
            if (i + 7 < len) o[i + 7] else 0,
        };
        const c = a * x8 + b;

        o[i] = c[0];
        if (i + 1 < len) o[i + 1] = c[1];
        if (i + 2 < len) o[i + 2] = c[2];
        if (i + 3 < len) o[i + 3] = c[3];
        if (i + 4 < len) o[i + 4] = c[4];
        if (i + 5 < len) o[i + 5] = c[5];
        if (i + 6 < len) o[i + 6] = c[6];
        if (i + 7 < len) o[i + 7] = c[7];
    }
    return o;
}

//
pub fn main() !void {
    // genExpTable();
    std.debug.assert(20 == dotProduct(4, &.{ 1, 2, 3, 4 }, &.{ 4, 3, 2, 1 }));
    std.debug.assert(1 == dotProduct(1, &.{1}, &.{1}));
    var o: [1]f32 = .{1};
    std.debug.assert(4.0 == vecMulAdd(1, &.{1}, 3, o[0..])[0]);
}

fn genExpTable() void {
    // Công thức tính sigmoid từ `word2vec.c`
    const size = @intToFloat(f32, SIGMOID_SIZE);
    var i: usize = 0;
    while (i < SIGMOID_SIZE) : (i += 1) {
        var x = @exp((@intToFloat(f32, i) / size * 2 - 1) * MAX_SIGMOID);
        x = x / (x + 1);
        std.debug.print("{d:.6}, ", .{x});
        if ((i + 1) % 8 == 0) std.debug.print("\n", .{});
    }
}

//
pub inline fn sigmoid(x: f32) f32 {
    // Return sigmoid value of x
    if (x >= MAX_SIGMOID) return 1;
    if (x < -MAX_SIGMOID) return 0;

    const index_float = ((x / MAX_SIGMOID) + 1) / 2 * SIGMOID_SIZE;
    const index_usize = @floatToInt(usize, @floor(index_float));
    return SIGMOID_VALUES[index_usize];
}

const SIGMOID_SIZE = 1024;
const MAX_SIGMOID = 6;

const SIGMOID_VALUES: [SIGMOID_SIZE]f32 = .{
    0.002473, 0.002502, 0.002531, 0.002561, 0.002591, 0.002621, 0.002652, 0.002683,
    0.002715, 0.002747, 0.002779, 0.002812, 0.002845, 0.002878, 0.002912, 0.002946,
    0.002981, 0.003016, 0.003052, 0.003087, 0.003124, 0.003160, 0.003197, 0.003235,
    0.003273, 0.003312, 0.003350, 0.003390, 0.003430, 0.003470, 0.003511, 0.003552,
    0.003594, 0.003636, 0.003679, 0.003722, 0.003765, 0.003810, 0.003854, 0.003900,
    0.003945, 0.003992, 0.004039, 0.004086, 0.004134, 0.004182, 0.004232, 0.004281,
    0.004332, 0.004382, 0.004434, 0.004486, 0.004538, 0.004592, 0.004646, 0.004700,
    0.004755, 0.004811, 0.004867, 0.004925, 0.004982, 0.005041, 0.005100, 0.005160,
    0.005220, 0.005281, 0.005343, 0.005406, 0.005469, 0.005533, 0.005598, 0.005664,
    0.005730, 0.005797, 0.005865, 0.005934, 0.006004, 0.006074, 0.006145, 0.006217,
    0.006290, 0.006364, 0.006438, 0.006513, 0.006590, 0.006667, 0.006745, 0.006824,
    0.006904, 0.006985, 0.007066, 0.007149, 0.007233, 0.007317, 0.007403, 0.007490,
    0.007577, 0.007666, 0.007756, 0.007846, 0.007938, 0.008031, 0.008125, 0.008220,
    0.008316, 0.008413, 0.008511, 0.008611, 0.008711, 0.008813, 0.008916, 0.009020,
    0.009126, 0.009232, 0.009340, 0.009449, 0.009559, 0.009671, 0.009784, 0.009898,
    0.010014, 0.010130, 0.010249, 0.010368, 0.010489, 0.010611, 0.010735, 0.010860,
    0.010987, 0.011115, 0.011245, 0.011376, 0.011508, 0.011642, 0.011778, 0.011915,
    0.012054, 0.012194, 0.012336, 0.012480, 0.012625, 0.012772, 0.012920, 0.013071,
    0.013223, 0.013377, 0.013532, 0.013689, 0.013849, 0.014010, 0.014172, 0.014337,
    0.014504, 0.014672, 0.014842, 0.015015, 0.015189, 0.015365, 0.015544, 0.015724,
    0.015906, 0.016091, 0.016277, 0.016466, 0.016657, 0.016850, 0.017045, 0.017243,
    0.017442, 0.017644, 0.017849, 0.018055, 0.018264, 0.018476, 0.018689, 0.018905,
    0.019124, 0.019345, 0.019569, 0.019795, 0.020023, 0.020255, 0.020489, 0.020725,
    0.020964, 0.021206, 0.021451, 0.021698, 0.021948, 0.022201, 0.022457, 0.022716,
    0.022977, 0.023242, 0.023509, 0.023780, 0.024054, 0.024330, 0.024610, 0.024893,
    0.025179, 0.025468, 0.025761, 0.026056, 0.026355, 0.026658, 0.026964, 0.027273,
    0.027585, 0.027901, 0.028221, 0.028544, 0.028871, 0.029201, 0.029535, 0.029873,
    0.030215, 0.030560, 0.030909, 0.031262, 0.031619, 0.031980, 0.032344, 0.032713,
    0.033086, 0.033463, 0.033844, 0.034229, 0.034619, 0.035013, 0.035411, 0.035813,
    0.036220, 0.036631, 0.037047, 0.037468, 0.037892, 0.038322, 0.038756, 0.039195,
    0.039639, 0.040087, 0.040541, 0.040999, 0.041462, 0.041931, 0.042404, 0.042882,
    0.043366, 0.043855, 0.044349, 0.044848, 0.045353, 0.045863, 0.046378, 0.046899,
    0.047426, 0.047958, 0.048496, 0.049040, 0.049589, 0.050144, 0.050705, 0.051272,
    0.051845, 0.052425, 0.053010, 0.053601, 0.054199, 0.054803, 0.055413, 0.056029,
    0.056652, 0.057282, 0.057918, 0.058561, 0.059210, 0.059866, 0.060529, 0.061199,
    0.061876, 0.062560, 0.063251, 0.063948, 0.064653, 0.065366, 0.066085, 0.066812,
    0.067547, 0.068289, 0.069038, 0.069795, 0.070560, 0.071332, 0.072112, 0.072900,
    0.073696, 0.074500, 0.075312, 0.076132, 0.076961, 0.077797, 0.078642, 0.079496,
    0.080357, 0.081228, 0.082107, 0.082994, 0.083890, 0.084795, 0.085709, 0.086632,
    0.087564, 0.088505, 0.089455, 0.090414, 0.091382, 0.092360, 0.093347, 0.094343,
    0.095349, 0.096365, 0.097390, 0.098425, 0.099470, 0.100525, 0.101589, 0.102664,
    0.103749, 0.104843, 0.105948, 0.107063, 0.108189, 0.109325, 0.110471, 0.111628,
    0.112795, 0.113973, 0.115162, 0.116362, 0.117572, 0.118793, 0.120026, 0.121269,
    0.122523, 0.123789, 0.125065, 0.126353, 0.127653, 0.128963, 0.130285, 0.131619,
    0.132964, 0.134321, 0.135690, 0.137070, 0.138462, 0.139866, 0.141281, 0.142709,
    0.144149, 0.145601, 0.147065, 0.148541, 0.150029, 0.151529, 0.153042, 0.154567,
    0.156105, 0.157655, 0.159217, 0.160792, 0.162380, 0.163980, 0.165593, 0.167219,
    0.168857, 0.170508, 0.172172, 0.173849, 0.175538, 0.177241, 0.178956, 0.180684,
    0.182426, 0.184180, 0.185947, 0.187728, 0.189521, 0.191328, 0.193147, 0.194980,
    0.196826, 0.198685, 0.200558, 0.202443, 0.204342, 0.206254, 0.208179, 0.210117,
    0.212069, 0.214034, 0.216012, 0.218003, 0.220007, 0.222025, 0.224055, 0.226099,
    0.228156, 0.230227, 0.232310, 0.234407, 0.236516, 0.238639, 0.240775, 0.242923,
    0.245085, 0.247260, 0.249447, 0.251648, 0.253861, 0.256087, 0.258326, 0.260578,
    0.262842, 0.265119, 0.267408, 0.269710, 0.272025, 0.274351, 0.276691, 0.279042,
    0.281406, 0.283781, 0.286169, 0.288569, 0.290981, 0.293404, 0.295840, 0.298287,
    0.300746, 0.303216, 0.305697, 0.308190, 0.310694, 0.313210, 0.315736, 0.318273,
    0.320821, 0.323380, 0.325950, 0.328529, 0.331120, 0.333720, 0.336331, 0.338952,
    0.341583, 0.344223, 0.346873, 0.349533, 0.352202, 0.354880, 0.357568, 0.360264,
    0.362969, 0.365683, 0.368406, 0.371137, 0.373876, 0.376623, 0.379378, 0.382141,
    0.384912, 0.387690, 0.390476, 0.393269, 0.396068, 0.398875, 0.401688, 0.404507,
    0.407333, 0.410165, 0.413004, 0.415847, 0.418697, 0.421552, 0.424412, 0.427277,
    0.430147, 0.433022, 0.435902, 0.438785, 0.441673, 0.444565, 0.447460, 0.450359,
    0.453262, 0.456168, 0.459076, 0.461988, 0.464902, 0.467818, 0.470737, 0.473657,
    0.476580, 0.479504, 0.482429, 0.485356, 0.488283, 0.491212, 0.494141, 0.497070,
    0.500000, 0.502930, 0.505859, 0.508788, 0.511717, 0.514644, 0.517571, 0.520496,
    0.523420, 0.526343, 0.529263, 0.532182, 0.535098, 0.538012, 0.540924, 0.543833,
    0.546738, 0.549641, 0.552540, 0.555435, 0.558327, 0.561215, 0.564098, 0.566978,
    0.569853, 0.572723, 0.575588, 0.578448, 0.581303, 0.584153, 0.586996, 0.589835,
    0.592667, 0.595493, 0.598312, 0.601125, 0.603932, 0.606732, 0.609524, 0.612310,
    0.615088, 0.617859, 0.620622, 0.623377, 0.626124, 0.628863, 0.631594, 0.634317,
    0.637031, 0.639736, 0.642432, 0.645120, 0.647798, 0.650467, 0.653127, 0.655777,
    0.658418, 0.661048, 0.663669, 0.666280, 0.668880, 0.671471, 0.674051, 0.676620,
    0.679179, 0.681727, 0.684264, 0.686790, 0.689306, 0.691810, 0.694303, 0.696784,
    0.699254, 0.701713, 0.704160, 0.706596, 0.709019, 0.711431, 0.713831, 0.716219,
    0.718594, 0.720958, 0.723309, 0.725649, 0.727975, 0.730290, 0.732592, 0.734881,
    0.737158, 0.739422, 0.741674, 0.743913, 0.746139, 0.748352, 0.750553, 0.752740,
    0.754915, 0.757077, 0.759225, 0.761361, 0.763484, 0.765593, 0.767690, 0.769773,
    0.771843, 0.773901, 0.775945, 0.777975, 0.779993, 0.781997, 0.783988, 0.785966,
    0.787931, 0.789883, 0.791821, 0.793746, 0.795658, 0.797557, 0.799442, 0.801315,
    0.803174, 0.805020, 0.806853, 0.808672, 0.810479, 0.812272, 0.814053, 0.815820,
    0.817575, 0.819316, 0.821044, 0.822760, 0.824462, 0.826151, 0.827828, 0.829492,
    0.831143, 0.832781, 0.834407, 0.836020, 0.837620, 0.839208, 0.840783, 0.842345,
    0.843895, 0.845433, 0.846958, 0.848471, 0.849971, 0.851459, 0.852935, 0.854399,
    0.855851, 0.857291, 0.858719, 0.860134, 0.861538, 0.862930, 0.864310, 0.865679,
    0.867036, 0.868381, 0.869715, 0.871037, 0.872347, 0.873647, 0.874935, 0.876211,
    0.877477, 0.878731, 0.879974, 0.881207, 0.882428, 0.883638, 0.884838, 0.886027,
    0.887205, 0.888372, 0.889529, 0.890675, 0.891811, 0.892937, 0.894052, 0.895157,
    0.896251, 0.897336, 0.898411, 0.899475, 0.900530, 0.901575, 0.902610, 0.903635,
    0.904651, 0.905657, 0.906653, 0.907640, 0.908618, 0.909586, 0.910545, 0.911495,
    0.912436, 0.913368, 0.914291, 0.915205, 0.916110, 0.917006, 0.917893, 0.918772,
    0.919643, 0.920504, 0.921358, 0.922203, 0.923039, 0.923868, 0.924688, 0.925500,
    0.926304, 0.927100, 0.927888, 0.928668, 0.929440, 0.930205, 0.930962, 0.931711,
    0.932453, 0.933188, 0.933915, 0.934634, 0.935346, 0.936052, 0.936749, 0.937440,
    0.938124, 0.938801, 0.939471, 0.940134, 0.940790, 0.941439, 0.942082, 0.942718,
    0.943348, 0.943971, 0.944587, 0.945197, 0.945801, 0.946399, 0.946990, 0.947575,
    0.948155, 0.948728, 0.949295, 0.949856, 0.950411, 0.950960, 0.951504, 0.952042,
    0.952574, 0.953101, 0.953622, 0.954137, 0.954647, 0.955152, 0.955651, 0.956145,
    0.956634, 0.957118, 0.957596, 0.958070, 0.958538, 0.959001, 0.959459, 0.959913,
    0.960361, 0.960805, 0.961244, 0.961678, 0.962108, 0.962533, 0.962953, 0.963369,
    0.963780, 0.964187, 0.964589, 0.964987, 0.965381, 0.965771, 0.966156, 0.966537,
    0.966914, 0.967287, 0.967656, 0.968020, 0.968381, 0.968738, 0.969091, 0.969440,
    0.969785, 0.970127, 0.970465, 0.970799, 0.971129, 0.971456, 0.971779, 0.972099,
    0.972415, 0.972727, 0.973037, 0.973342, 0.973645, 0.973944, 0.974239, 0.974532,
    0.974821, 0.975107, 0.975390, 0.975670, 0.975946, 0.976220, 0.976491, 0.976758,
    0.977023, 0.977284, 0.977543, 0.977799, 0.978052, 0.978302, 0.978549, 0.978794,
    0.979036, 0.979275, 0.979511, 0.979745, 0.979977, 0.980205, 0.980431, 0.980655,
    0.980876, 0.981095, 0.981311, 0.981524, 0.981736, 0.981945, 0.982151, 0.982356,
    0.982558, 0.982757, 0.982955, 0.983150, 0.983343, 0.983534, 0.983723, 0.983909,
    0.984094, 0.984276, 0.984456, 0.984635, 0.984811, 0.984985, 0.985158, 0.985328,
    0.985496, 0.985663, 0.985828, 0.985990, 0.986151, 0.986311, 0.986468, 0.986623,
    0.986777, 0.986929, 0.987080, 0.987228, 0.987375, 0.987520, 0.987664, 0.987806,
    0.987946, 0.988085, 0.988222, 0.988358, 0.988492, 0.988624, 0.988755, 0.988885,
    0.989013, 0.989140, 0.989265, 0.989389, 0.989511, 0.989632, 0.989751, 0.989870,
    0.989986, 0.990102, 0.990216, 0.990329, 0.990441, 0.990551, 0.990660, 0.990768,
    0.990874, 0.990980, 0.991084, 0.991187, 0.991289, 0.991389, 0.991489, 0.991587,
    0.991684, 0.991780, 0.991875, 0.991969, 0.992062, 0.992154, 0.992244, 0.992334,
    0.992423, 0.992510, 0.992597, 0.992683, 0.992767, 0.992851, 0.992934, 0.993015,
    0.993096, 0.993176, 0.993255, 0.993333, 0.993410, 0.993487, 0.993562, 0.993636,
    0.993710, 0.993783, 0.993855, 0.993926, 0.993996, 0.994066, 0.994135, 0.994203,
    0.994270, 0.994336, 0.994402, 0.994467, 0.994531, 0.994594, 0.994657, 0.994719,
    0.994780, 0.994840, 0.994900, 0.994959, 0.995018, 0.995075, 0.995133, 0.995189,
    0.995245, 0.995300, 0.995354, 0.995408, 0.995462, 0.995514, 0.995566, 0.995618,
    0.995668, 0.995719, 0.995768, 0.995817, 0.995866, 0.995914, 0.995961, 0.996008,
    0.996055, 0.996100, 0.996146, 0.996190, 0.996235, 0.996278, 0.996321, 0.996364,
    0.996406, 0.996448, 0.996489, 0.996530, 0.996570, 0.996610, 0.996650, 0.996688,
    0.996727, 0.996765, 0.996803, 0.996840, 0.996876, 0.996913, 0.996948, 0.996984,
    0.997019, 0.997054, 0.997088, 0.997122, 0.997155, 0.997188, 0.997221, 0.997253,
    0.997285, 0.997317, 0.997348, 0.997379, 0.997409, 0.997439, 0.997469, 0.997498,
};
